1.	Design character and opponent animation frames
	a.	I found a method that seems to work well but is tedious so a better solution would be +
		i.		Look up “karate kick” or “karate punch silhouette” on google images
		ii.		Pick a stance to model the animation frame after
		iii.	Use a pixel art program, such as “PixilArt” which runs in browser, to draw a custom version of that stance.
		iv.		Make sure the pixel art version you create is 48 pixels high by 32 pixels wide.
		v.		Open a text file and map the pixel art version to binary code ie;
			1.	00000000 00001110 00011000 00000000
			2.	00000000 00001111 00001100 00000000
			3.	……………………………………………………………….
			4.	Note that there should be 48 rows and 4 columns  (48 bits x 32 bits)
		vi.	Use the helper function in our github called “drawBinary” to print your current binary file to screen with all 1s replaced with ‘*’ and all 0s replaced with a space to get a better visual representation since 1s and 0s can become unintelligible.
			1.	It takes a command line argument which would be the text file you’re creating. 
		vii.	Use the helper function in our github called “binaryToHexColumnwise” to convert this file of bits to hexadecimal notation for use in the assembly program.
			1.	It takes a command line argument which would be the text file you created.

2.	Design intro screen art
	a.	Street Fighter 5 custom text
	b.	Strips of color above and below the text that flash or have some effect?

3.	Design a start menu/intro screen menu
	a.	Menu items
		i.	Start game
		ii.	Quit
		iii.	Selector Icon
			1.	To indicate which option they are currently on
		iv.	Or alternatively, we don’t use a menu and just print “press [some key] to start”
		v.	Add music/sound effects to the start menu

		
5.	Figure out how to generate random numbers (for opponent AI)

6.	Develop opponent AI
	a.	Use random number generation to determine when the opponent kicks, punches, moves, and how often he blocks incoming strikes.
	2a. 	User a timer to determine when opponent will strike or block. ie. Opponent will attack every 2 seconds or if time is a multiple of 3 and 5. 
	b.	If he is being struck, generate a number between 0 and 100 and if it’s greater than 60, block – alter for difficulty levels
	c.	If he isn’t being struck, generate a number similarly that determines if he moves or strikes

7.	Design the HUD 
	a.	Character and opponent health bars
	b.	Timer?
	c.	Score

	
8.  Create strike sounds and possibly animations (blood flying)


9. 	Fix Ryu bug, kicking at left edge of screen make him pop through to other side(Done)
10.	AI fix - Ken moves right too often when ryu stands still

11. Letters for spelling the names of all characters for match win banners

12. Animation frames for a character that was struck and flying kicks

13. One more character - set of animation frames

14. Two player model

15. Some background image graphic data

16. 



It would probably be a good idea to have a punch, kick, block, and struck animation for the opponent and our character, develop some very basic opponent AI, develop a preliminary HUD, and map the RAM locations as precisely and thoroughly as possible for the first project update and worry about the start screen, additional animations,  AI tweaking, a more advanced HUD and stuff like that for the final product.

For opponent graphics, we may be able to just draw the character in reverse for now as these images take up a lot of space.

Note that any punch or kick frames should be such that the character's fist or foot is extended to the very edge of the picture so that it will look like he actually hits the opponent


	